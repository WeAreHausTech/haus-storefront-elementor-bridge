name: Test Release

on:
  push:
    tags:
      - "v*" # triggers on tags like v1.0.0, v2.3.1
  workflow_dispatch:
    inputs:
      version:
        description: "Version number"
        required: true
        default: "v1.0.0-dev"

permissions:
  contents: write

jobs:
  test_release:
    name: Test Release Flow
    runs-on: ubuntu-latest

    steps:
      # Checkout full history for changelog
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Identify branch associated with the tag
      - name: Identify branch
        id: branch
        run: |
          BRANCH=$(git branch -r --contains $GITHUB_REF | grep origin/ | head -n 1 | sed 's|origin/||')
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "Detected branch: $BRANCH"

      - name: Checkout detected branch
        run: |
          git checkout ${{ steps.branch.outputs.branch }}

      # Extract version
      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION=${GITHUB_REF_NAME}
          fi
          CLEAN_VERSION=${VERSION#v}
          echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $CLEAN_VERSION"

      # Sync version to composer.json
      - name: Sync version to composer.json
        run: |
          jq --arg ver "${{ steps.version.outputs.version }}" '.version = $ver' composer.json > composer.tmp && mv composer.tmp composer.json
          cat composer.json

      # Sync version to package.json
      - name: Sync version to package.json
        run: |
          jq --arg ver "${{ steps.version.outputs.version }}" '.version = $ver' package.json > package.tmp && mv package.tmp package.json
          cat package.json

      # Generate release notes (using conventional commits)
      - name: Generate release notes
        id: notes
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          configuration: ".github/release-changelog-config.json"
          fromTag: v0.0.0
          toTag: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create or update RELEASE-NOTES.md
      - name: Update RELEASE-NOTES.md
        run: |
          echo "${{ steps.notes.outputs.changelog || 'No changelog generated.' }}" > RELEASE-NOTES.md
          cat RELEASE-NOTES.md

      # Commit updated files back to branch
      - name: Commit and push changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add composer.json package.json RELEASE-NOTES.md
          git commit -m "chore(release): sync version and update release notes for ${{ github.ref_name }}" || echo "No changes to commit"
          git push origin HEAD

      # OPTIONAL: skip GitHub release creation during testing
      - name: Create GitHub Release (disabled for testing)
        if: false
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          name: ${{ github.event.inputs.version || github.ref_name }}
          body_path: RELEASE-NOTES.md
          draft: false
          prerelease: false
          files: ./release.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
