name: Create Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # triggers on tags like v1.0.0, v2.3.1
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number'
        required: true
        default: 'v1.0.0-dev'

jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest

    steps:
      # Checkout full repo history so changelog can detect commits/tags
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Extract version number (strip 'v' prefix)
      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION=${GITHUB_REF_NAME}
          fi
          CLEAN_VERSION=${VERSION#v}
          echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT

      # Update version in package.json
      - name: Sync version to package.json
        run: |
          jq --arg ver "${{ steps.version.outputs.version }}" '.version = $ver' package.json > package.tmp && mv package.tmp package.json

      # Setup PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      # Install PHP dependencies
      - name: Install PHP dependencies
        run: composer install --no-dev --no-interaction --no-progress --optimize-autoloader

      # Get previous tag for changelog generation
      - name: Get previous tag
        id: from_tag
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ github.ref_name }}^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag, get the first commit
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "Previous tag: $PREVIOUS_TAG"

      # Generate release notes automatically from conventional commits
      - name: Generate release notes
        id: notes
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          configuration: '.github/release-changelog-config.json'
          fromTag: ${{ steps.from_tag.outputs.tag }}
          toTag: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Debug: Show generated changelog
      - name: Debug changelog
        run: |
          echo "Generated changelog:"
          echo "==================="
          echo "${{ steps.notes.outputs.changelog }}"
          echo "==================="

      # Prepare files for packaging
      - name: Prepare release files
        run: |
          mkdir -p ./tmp
          cp -r ./src ./composer.json ./composer.lock ./README.md ./tmp
          if [ -d "./dist" ]; then cp -r ./dist ./tmp; fi

      # Create ZIP file
      - name: Create ZIP file
        run: |
          cd tmp
          zip -r ../release.zip .
          cd ..

      # Create GitHub Release with attached ZIP
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          name: ${{ github.event.inputs.version || github.ref_name }}
          body: ${{ steps.notes.outputs.changelog || 'Release notes generated automatically.' }}
          draft: false
          prerelease: false
          files: ./release.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Commit the updated package.json and RELEASE-NOTES.md
      - name: Commit updated files
        if: ${{ github.event_name == 'push' }}
        run: |
          # Create a temporary file with new release notes
          echo "${{ steps.notes.outputs.changelog }}" > new-release-notes.md
          echo "" >> new-release-notes.md

          # If RELEASE-NOTES.md exists, prepend new notes to it
          if [ -f "RELEASE-NOTES.md" ]; then
            cat new-release-notes.md RELEASE-NOTES.md > temp-release-notes.md
            mv temp-release-notes.md RELEASE-NOTES.md
          else
            mv new-release-notes.md RELEASE-NOTES.md
          fi

          # Clean up
          rm -f new-release-notes.md temp-release-notes.md

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git fetch origin main
          git stash
          git checkout main
          git stash pop
          git add package.json RELEASE-NOTES.md
          git commit -m "chore(release): sync version and update release notes for ${{ github.ref_name }}"
          git push origin main
